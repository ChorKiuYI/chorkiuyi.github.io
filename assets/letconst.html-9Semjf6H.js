import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app-qKmLr34n.js";const e={},p=t(`<p>专业术语:</p><ul><li>“变量提升”现象，即变量可以在声明之前使用，值为undefined</li><li>暂时性死区: 在代码块内，使用let命令<strong>声明变量之前，该变量都是不可用的</strong>。这在语法上，称为 <code>暂时性死区</code></li></ul><h2 id="let特点" tabindex="-1"><a class="header-anchor" href="#let特点"><span>let特点</span></a></h2><ol><li>不存在变量提升</li><li>暂时性死区</li><li>在相同作用域内，不能重复声明</li></ol><h2 id="块级作用域" tabindex="-1"><a class="header-anchor" href="#块级作用域"><span>块级作用域</span></a></h2><p>ES5只有全局作用域和函数作用域，没有块级作用域</p><h3 id="为什么需要块级作用域" tabindex="-1"><a class="header-anchor" href="#为什么需要块级作用域"><span>为什么需要块级作用域？？？？？</span></a></h3><ol><li>内层变量可能覆盖外层变量</li><li>用来计数的循环变量泄露为全局变量。</li></ol><h3 id="块级作用域-1" tabindex="-1"><a class="header-anchor" href="#块级作用域-1"><span>块级作用域</span></a></h3><ol><li>块级作用域: let实际上为 JavaScript 新增了块级作用域。</li><li>块级作用域与函数声明： ES6 引入了块级作用域，明确允许在块级作用域之中声明函数,但在块级作用域外不可用，但是，考虑到环境导致的行为差异太大，应该避免在块级作用域内声明函数。如果确实需要，也应该写成函数表达式，而不是函数声明语句。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 证明存在块级作用域——let命令所在的代码块内有效。</span>
<span class="token punctuation">{</span>
    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span>
    <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">2</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ReferenceError: b is not defined</span>

<span class="token comment">// 证明存在块级作用域——for中的let 和 var</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">6</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">var 定义的参数：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 6</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">6</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">let 定义的参数：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>j<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ReferenceError: j is not defined</span>



<span class="token comment">// 例子：每个一秒打印</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">6</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">// 延时队列</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">var 定义的参数：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 执行这个代码的时候，主线程for已经结束执行了</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// var 定义的参数：6</span>
<span class="token comment">// var 定义的参数：6</span>
<span class="token comment">// var 定义的参数：6</span>
<span class="token comment">// var 定义的参数：6</span>
<span class="token comment">// var 定义的参数：6</span>
<span class="token comment">// var 定义的参数：6</span>


<span class="token comment">// 用立即执行函数来解决，这里其实利用了函数作用域</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">6</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">//函数作用域</span>
        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">// 延时队列</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">var 定义的参数-函数作用域：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 执行这个代码的时候，主线程for已经结束执行了</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// var 定义的参数-函数作用域：0</span>
<span class="token comment">// var 定义的参数-函数作用域：1</span>
<span class="token comment">// var 定义的参数-函数作用域：2</span>
<span class="token comment">// var 定义的参数-函数作用域：3</span>
<span class="token comment">// var 定义的参数-函数作用域：4</span>
<span class="token comment">// var 定义的参数-函数作用域：5</span>

<span class="token comment">// 用Let解决 因为有块级作用域</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">6</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">let 定义的参数-块级作用域：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>j<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// let 定义的参数-块级作用域：0</span>
<span class="token comment">// let 定义的参数-块级作用域：1</span>
<span class="token comment">// let 定义的参数-块级作用域：2</span>
<span class="token comment">// let 定义的参数-块级作用域：3</span>
<span class="token comment">// let 定义的参数-块级作用域：4</span>
<span class="token comment">// let 定义的参数-块级作用域：5</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="const声明常量-块级作用域有的特点都有" tabindex="-1"><a class="header-anchor" href="#const声明常量-块级作用域有的特点都有"><span>const声明常量（块级作用域有的特点都有）</span></a></h2><ol><li>声明一个只读常量，一旦声明就不能再次更改了</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token string">&#39;1111&#39;</span>
<span class="token comment">// a = &#39;2222&#39; // Assignment to constant variable(常量变量赋值)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>如果声明复合类型的数据（对象、数组），因为是复杂数据类型，存储在堆内存，变量保存的是其引用地址，而不是数据本身，所以const声明变量的时候，不能更改的是引用地址，而复杂数据类型数据本身是可以修改的</li></ol><p>如果想要连复杂类型数据都不能修改呢？</p><p>使用 <code>Object.freeze</code>方法冻结</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 对象冻结</span>
<span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">12</span><span class="token punctuation">,</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;hello&#39;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 12</span>
user<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">15</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 15</span>
user<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token string">&#39;0101001&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0101001</span>
Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span> <span class="token comment">// 冻结</span>
user<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">12</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 15</span>
user<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token string">&#39;男&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>总结：ES6 规定暂时性死区和let、const语句不出现变量提升，主要是为了减少运行时错误，防止在变量声明前就使用这个变量，从而导致意料之外的行为。</p><p>总之，暂时性死区的本质就是，只要<strong>一进入当前作用域，所要使用的变量就已经存在了，但是不可获取，只有等到声明变量的那一行代码出现，才可以获取和使用该变量</strong>。</p></blockquote><p>声明变量方法（6）</p><ul><li>ES5只有两种声明变量的方法：var function</li><li>ES6新增4种：let const import class</li></ul><h2 id="顶层对象属性" tabindex="-1"><a class="header-anchor" href="#顶层对象属性"><span>顶层对象属性</span></a></h2><p>顶层对象，在浏览器指的是window对象、node指的是global对象。ES5中，顶层对象和全局对象是等价的，也因此会带来不少问题。</p><p><code>var、function</code> 声明的全局变量，依旧是顶层对象的属性 <code>let、const、class</code> 声明的全局变量，不属于顶层对象的属性。</p>`,24),o=[p];function c(l,i){return s(),a("div",null,o)}const k=n(e,[["render",c],["__file","letconst.html.vue"]]),d=JSON.parse('{"path":"/es6/letconst.html","title":"1.Letconst","lang":"en-US","frontmatter":{"title":"1.Letconst","icon":"object-group","order":1,"category":["Guide"],"tag":["Letconst"],"description":"专业术语: “变量提升”现象，即变量可以在声明之前使用，值为undefined 暂时性死区: 在代码块内，使用let命令声明变量之前，该变量都是不可用的。这在语法上，称为 暂时性死区 let特点 不存在变量提升 暂时性死区 在相同作用域内，不能重复声明 块级作用域 ES5只有全局作用域和函数作用域，没有块级作用域 为什么需要块级作用域？？？？？ 内层变...","head":[["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://your.domain/zh/es6/letconst.html"}],["meta",{"property":"og:url","content":"https://your.domain/es6/letconst.html"}],["meta",{"property":"og:site_name","content":"Docs Demo"}],["meta",{"property":"og:title","content":"1.Letconst"}],["meta",{"property":"og:description","content":"专业术语: “变量提升”现象，即变量可以在声明之前使用，值为undefined 暂时性死区: 在代码块内，使用let命令声明变量之前，该变量都是不可用的。这在语法上，称为 暂时性死区 let特点 不存在变量提升 暂时性死区 在相同作用域内，不能重复声明 块级作用域 ES5只有全局作用域和函数作用域，没有块级作用域 为什么需要块级作用域？？？？？ 内层变..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"article:author","content":"ChorKiu"}],["meta",{"property":"article:tag","content":"Letconst"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"1.Letconst\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ChorKiu\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"let特点","slug":"let特点","link":"#let特点","children":[]},{"level":2,"title":"块级作用域","slug":"块级作用域","link":"#块级作用域","children":[{"level":3,"title":"为什么需要块级作用域？？？？？","slug":"为什么需要块级作用域","link":"#为什么需要块级作用域","children":[]},{"level":3,"title":"块级作用域","slug":"块级作用域-1","link":"#块级作用域-1","children":[]}]},{"level":2,"title":"const声明常量（块级作用域有的特点都有）","slug":"const声明常量-块级作用域有的特点都有","link":"#const声明常量-块级作用域有的特点都有","children":[]},{"level":2,"title":"顶层对象属性","slug":"顶层对象属性","link":"#顶层对象属性","children":[]}],"git":{},"readingTime":{"minutes":4.11,"words":1232},"filePathRelative":"es6/letconst.md","autoDesc":true}');export{k as comp,d as data};
