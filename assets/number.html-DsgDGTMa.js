import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app-qKmLr34n.js";const p={},e=t(`<p>数值的扩展有很多，这里只记录一下工作中可能会涉及到的方法，其他像bigInt类型的扩展、全曲线函数、对数相关方法、32位精度等冷门的就不记录在内</p><h2 id="number-isfinite-和number-isnan" tabindex="-1"><a class="header-anchor" href="#number-isfinite-和number-isnan"><span>Number.isFinite()和Number.isNaN()</span></a></h2><ul><li>Number.isFinite()用来检查一个数值是否为有限的（finite），即不是Infinity。</li><li>Number.isNaN()用来检查一个值是否为NaN。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>Number<span class="token punctuation">.</span><span class="token function">isFinite</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
Number<span class="token punctuation">.</span><span class="token function">isFinite</span><span class="token punctuation">(</span><span class="token number">0.8</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
Number<span class="token punctuation">.</span><span class="token function">isFinite</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
Number<span class="token punctuation">.</span><span class="token function">isFinite</span><span class="token punctuation">(</span><span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
Number<span class="token punctuation">.</span><span class="token function">isFinite</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
Number<span class="token punctuation">.</span><span class="token function">isFinite</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
Number<span class="token punctuation">.</span><span class="token function">isFinite</span><span class="token punctuation">(</span><span class="token string">&#39;15&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
Number<span class="token punctuation">.</span><span class="token function">isFinite</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>

Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">&#39;15&#39;</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token operator">/</span><span class="token number">NaN</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">&#39;true&#39;</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">&#39;true&#39;</span> <span class="token operator">/</span> <span class="token string">&#39;true&#39;</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>与传统的全局方法isFinite()和isNaN()的区别在于，传统方法先调用Number()将非数值的值转为数值，再进行判断，而这两个新方法只对数值有效</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">isFinite</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
<span class="token function">isFinite</span><span class="token punctuation">(</span><span class="token string">&quot;25&quot;</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
Number<span class="token punctuation">.</span><span class="token function">isFinite</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
Number<span class="token punctuation">.</span><span class="token function">isFinite</span><span class="token punctuation">(</span><span class="token string">&quot;25&quot;</span><span class="token punctuation">)</span> <span class="token comment">// false</span>

<span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
<span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">&quot;NaN&quot;</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">&quot;NaN&quot;</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="number-parseint-number-parsefloat" tabindex="-1"><a class="header-anchor" href="#number-parseint-number-parsefloat"><span>Number.parseInt(), Number.parseFloat()</span></a></h2><p>ES6 将全局方法parseInt()和parseFloat()，移植到Number对象上面，行为完全保持不变。 这样做的目的，是逐步减少全局性方法，使得语言逐步模块化。</p><ul><li>Number.parseInt() 取整</li><li>Number.parseFloat()</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>Number<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token number">13.33333</span><span class="token punctuation">)</span> <span class="token comment">// 13</span>

Number<span class="token punctuation">.</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">&#39;10&#39;</span><span class="token punctuation">)</span> <span class="token comment">//10</span>
Number<span class="token punctuation">.</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">&#39;10.00&#39;</span><span class="token punctuation">)</span> <span class="token comment">//10</span>
Number<span class="token punctuation">.</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">&#39;237,21&#39;</span><span class="token punctuation">)</span> <span class="token comment">//237</span>
Number<span class="token punctuation">.</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">&#39;237.21&#39;</span><span class="token punctuation">)</span> <span class="token comment">//237.21</span>
Number<span class="token punctuation">.</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">&#39;12 34 56&#39;</span><span class="token punctuation">)</span> <span class="token comment">//12</span>
Number<span class="token punctuation">.</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">&#39; 36 &#39;</span><span class="token punctuation">)</span> <span class="token comment">//36</span>
Number<span class="token punctuation">.</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">&#39;36 is my age&#39;</span><span class="token punctuation">)</span> <span class="token comment">//36</span>
Number<span class="token punctuation">.</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">&#39;-10&#39;</span><span class="token punctuation">)</span> <span class="token comment">//-10</span>
Number<span class="token punctuation">.</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">&#39;-10.2&#39;</span><span class="token punctuation">)</span> <span class="token comment">//-10.2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="number-isinteger-用来判断一个数值是否为整数。" tabindex="-1"><a class="header-anchor" href="#number-isinteger-用来判断一个数值是否为整数。"><span>Number.isInteger()用来判断一个数值是否为整数。</span></a></h2><p>PS：如果对数据精度的要求较高，不建议使用Number.isInteger()判断一个数值是否为整数</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>Number<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//true  </span>
Number<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token number">25.4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false </span>
Number<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token string">&#39;25&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false </span>
Number<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false </span>
Number<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//false</span>
Number<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="math-对象的扩展" tabindex="-1"><a class="header-anchor" href="#math-对象的扩展"><span>Math 对象的扩展</span></a></h2><h3 id="math-trunc-用于去除一个数的小数部分-返回整数部分" tabindex="-1"><a class="header-anchor" href="#math-trunc-用于去除一个数的小数部分-返回整数部分"><span>Math.trunc() 用于去除一个数的小数部分，返回整数部分</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">trunc</span><span class="token punctuation">(</span><span class="token number">4.7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4 </span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">trunc</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">4.7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -4  </span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">trunc</span><span class="token punctuation">(</span><span class="token string">&#39;123.321&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123 </span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">trunc</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 </span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">trunc</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0 </span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">trunc</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0 </span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">trunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN </span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">trunc</span><span class="token punctuation">(</span><span class="token string">&#39;demo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="math-sign-判断一个数到底是正数、负数、还是零。对于非数值-会先将其转换为数值。" tabindex="-1"><a class="header-anchor" href="#math-sign-判断一个数到底是正数、负数、还是零。对于非数值-会先将其转换为数值。"><span>Math.sign() 判断一个数到底是正数、负数、还是零。对于非数值，会先将其转换为数值。</span></a></h3><p>它会返回五种值。</p><ul><li>参数为正数，返回+1；</li><li>参数为负数，返回-1；</li><li>参数为 0，返回0；</li><li>参数为-0，返回-0;</li><li>其他值，返回NaN。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>Math<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
Math<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -1</span>
Math<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
Math<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -0</span>
Math<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token string">&#39;123.321&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
Math<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token string">&#39;demo1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="math-cbrt-方法用于计算一个数的立方根。" tabindex="-1"><a class="header-anchor" href="#math-cbrt-方法用于计算一个数的立方根。"><span>Math.cbrt()方法用于计算一个数的立方根。</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>Math<span class="token punctuation">.</span><span class="token function">cbrt</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
Math<span class="token punctuation">.</span><span class="token function">cbrt</span><span class="token punctuation">(</span><span class="token string">&#39;8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
Math<span class="token punctuation">.</span><span class="token function">cbrt</span><span class="token punctuation">(</span><span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>
Math<span class="token punctuation">.</span><span class="token function">cbrt</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
Math<span class="token punctuation">.</span><span class="token function">cbrt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
Math<span class="token punctuation">.</span><span class="token function">cbrt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1.2599210498948732</span>
Math<span class="token punctuation">.</span><span class="token function">cbrt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结：</span></a></h2><table><thead><tr><th>方法</th><th>作用</th><th>简单使用</th></tr></thead><tbody><tr><td>Number.isFinite()</td><td>检查一个数值是否为有限的（finite），即不是Infinity</td><td>Number.isFinite(15); // true</td></tr><tr><td>Number.isNaN()</td><td>检查一个值是否为NaN</td><td>Number.isNaN(NaN) // true</td></tr><tr><td>Number.parseInt()</td><td>取整</td><td>Number.parseInt(13.33333) // 13</td></tr><tr><td>Number.parseFloat()</td><td>将参数解析为浮点数并将其返回</td><td>Number.parseFloat(&#39;36 is my age&#39;) //36</td></tr><tr><td>Number.isInteger()</td><td>用来判断一个数值是否为整数</td><td>Number.isInteger(25); //true</td></tr><tr><td>Math.trunc()</td><td>用于去除一个数的小数部分，返回整数部分。</td><td>Math.trunc(4.9) // 4</td></tr><tr><td>Math.sign()</td><td>判断一个数到底是正数、负数、还是零。对于非数值，会先将其转换为数值</td><td>Math.sign(23); // 1 <br> Math.sign(-23); // -1 <br>Math.sign(0); // 0 <br>Math.sign(-0); // -0 <br>Math.sign(&#39;123.321&#39;); // 1 <br>Math.sign(&#39;demo1&#39;); // NaN</td></tr><tr><td>Math.cbrt()</td><td>用于计算一个数的立方根。</td><td>Math.cbrt(8); // 2 <br>Math.cbrt(&#39;8&#39;); // 2 <br>Math.cbrt(27); // 3 <br>Math.cbrt(8); // 2 <br>Math.cbrt(1); // 1 <br>Math.cbrt(2); // 1.2599210498948732 <br>Math.cbrt(0); // 0</td></tr></tbody></table>`,24),c=[e];function o(i,u){return s(),a("div",null,c)}const k=n(p,[["render",o],["__file","number.html.vue"]]),m=JSON.parse('{"path":"/es6/number.html","title":"4. 数值扩展","lang":"en-US","frontmatter":{"title":"4. 数值扩展","icon":"object-group","order":4,"category":["Guide"],"tag":["数值扩展"],"description":"数值的扩展有很多，这里只记录一下工作中可能会涉及到的方法，其他像bigInt类型的扩展、全曲线函数、对数相关方法、32位精度等冷门的就不记录在内 Number.isFinite()和Number.isNaN() Number.isFinite()用来检查一个数值是否为有限的（finite），即不是Infinity。 Number.isNaN()用来检查...","head":[["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://your.domain/zh/es6/number.html"}],["meta",{"property":"og:url","content":"https://your.domain/es6/number.html"}],["meta",{"property":"og:site_name","content":"Docs Demo"}],["meta",{"property":"og:title","content":"4. 数值扩展"}],["meta",{"property":"og:description","content":"数值的扩展有很多，这里只记录一下工作中可能会涉及到的方法，其他像bigInt类型的扩展、全曲线函数、对数相关方法、32位精度等冷门的就不记录在内 Number.isFinite()和Number.isNaN() Number.isFinite()用来检查一个数值是否为有限的（finite），即不是Infinity。 Number.isNaN()用来检查..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"article:author","content":"ChorKiu"}],["meta",{"property":"article:tag","content":"数值扩展"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"4. 数值扩展\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ChorKiu\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"Number.isFinite()和Number.isNaN()","slug":"number-isfinite-和number-isnan","link":"#number-isfinite-和number-isnan","children":[]},{"level":2,"title":"Number.parseInt(), Number.parseFloat()","slug":"number-parseint-number-parsefloat","link":"#number-parseint-number-parsefloat","children":[]},{"level":2,"title":"Number.isInteger()用来判断一个数值是否为整数。","slug":"number-isinteger-用来判断一个数值是否为整数。","link":"#number-isinteger-用来判断一个数值是否为整数。","children":[]},{"level":2,"title":"Math 对象的扩展","slug":"math-对象的扩展","link":"#math-对象的扩展","children":[{"level":3,"title":"Math.trunc() 用于去除一个数的小数部分，返回整数部分","slug":"math-trunc-用于去除一个数的小数部分-返回整数部分","link":"#math-trunc-用于去除一个数的小数部分-返回整数部分","children":[]},{"level":3,"title":"Math.sign() 判断一个数到底是正数、负数、还是零。对于非数值，会先将其转换为数值。","slug":"math-sign-判断一个数到底是正数、负数、还是零。对于非数值-会先将其转换为数值。","link":"#math-sign-判断一个数到底是正数、负数、还是零。对于非数值-会先将其转换为数值。","children":[]},{"level":3,"title":"Math.cbrt()方法用于计算一个数的立方根。","slug":"math-cbrt-方法用于计算一个数的立方根。","link":"#math-cbrt-方法用于计算一个数的立方根。","children":[]}]},{"level":2,"title":"总结：","slug":"总结","link":"#总结","children":[]}],"git":{},"readingTime":{"minutes":2.84,"words":851},"filePathRelative":"es6/number.md","autoDesc":true}');export{k as comp,m as data};
