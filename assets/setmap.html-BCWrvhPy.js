import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app-qKmLr34n.js";const e={},p=t(`<h2 id="set" tabindex="-1"><a class="header-anchor" href="#set"><span>Set,</span></a></h2><p>ES6新增的数据类型。类似数组，<strong>成员值是唯一的，没有重复的值</strong>。 作用：可以去除重复的值，因为Set()的成员是唯一，没有重复的值</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 写法1</span>
<span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    s<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
s <span class="token comment">// new Set([1,2,3,4,5,6,7,8])</span>
<span class="token punctuation">[</span><span class="token operator">...</span>s<span class="token punctuation">]</span> <span class="token comment">// [1, 2, 3, 4, 5, 6, 7, 8]</span>

<span class="token comment">// 写法2</span>
<span class="token keyword">let</span> s <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
s <span class="token comment">// new Set([1,2,3,4,5,6,7,8])</span>
<span class="token punctuation">[</span><span class="token operator">...</span>s<span class="token punctuation">]</span> <span class="token comment">// [1, 2, 3, 4, 5, 6, 7, 8]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Set 实例属性</p><table><thead><tr><th>方法</th><th>作用</th><th>例子</th></tr></thead><tbody><tr><td>Set.prototype.size</td><td>返回Set实例的成员总数</td><td>s.size</td></tr></tbody></table><p>Set 实例<strong>操作</strong>方法（用于操作数据）【4】</p><table><thead><tr><th>方法</th><th>作用</th><th>例子</th></tr></thead><tbody><tr><td>Set.prototype.add(value)</td><td>添加某个值，返回 Set 结构本身</td><td>s.add(value)</td></tr><tr><td>Set.prototype.delete(value)</td><td>删除某个值，返回一个布尔值，表示删除是否成功</td><td>s.delete(value)</td></tr><tr><td>Set.prototype.has(value)</td><td>返回一个布尔值，表示该值是否为Set的成员</td><td>s.has(value)</td></tr><tr><td>Set.prototype.clear()</td><td>清除所有成员，没有返回值</td><td>s.has()</td></tr></tbody></table><p>Set 实例<strong>遍历</strong>方法（用于遍历成员）【4】 + for...of循环遍历</p><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>Set.prototype.keys()</td><td>返回键名的遍历器</td></tr><tr><td>Set.prototype.values()</td><td>返回键值的遍历器</td></tr><tr><td>Set.prototype.entries()</td><td>返回键值对的遍历器</td></tr><tr><td>Set.prototype.forEach()</td><td>使用回调函数遍历每个成员</td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;red&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;green&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;blue&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> set<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// red</span>
<span class="token comment">// green</span>
<span class="token comment">// blue</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> set<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// red</span>
<span class="token comment">// green</span>
<span class="token comment">// blue</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> set<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// [&quot;red&quot;, &quot;red&quot;]</span>
<span class="token comment">// [&quot;green&quot;, &quot;green&quot;]</span>
<span class="token comment">// [&quot;blue&quot;, &quot;blue&quot;]</span>

set<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">&#39; : &#39;</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// red : red</span>
<span class="token comment">// green : green</span>
<span class="token comment">// blue : blue</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="map" tabindex="-1"><a class="header-anchor" href="#map"><span>Map</span></a></h2><p>本质上是键值对的集合（Hash 结构）</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> m1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
m1<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
m1 <span class="token comment">// new Map([[&quot;m1&quot;,&quot;map实例1&quot;]])</span>





<span class="token keyword">var</span> m2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;m2-1&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;map实例2-1&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">&#39;m2-2&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;map实例2-2&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment">// new Map([[&quot;m2-1&quot;,&quot;map实例2-1&quot;],[&quot;m2-2&quot;,&quot;map实例2-2&quot;]])</span>
m2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;m2-1&#39;</span><span class="token punctuation">)</span> <span class="token comment">// &#39;map实例2-1&#39;</span>
m2<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">&#39;m2-1&#39;</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
m2<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">&#39;demo&#39;</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
m2<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">&#39;m2-1&#39;</span><span class="token punctuation">)</span>
m2<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">&#39;m2-1&#39;</span><span class="token punctuation">)</span> <span class="token comment">// false </span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13),o=[p];function c(l,u){return s(),a("div",null,o)}const d=n(e,[["render",c],["__file","setmap.html.vue"]]),k=JSON.parse('{"path":"/base/es6/setmap.html","title":"9. setMap","lang":"en-US","frontmatter":{"title":"9. setMap","icon":"object-group","order":9,"category":["Guide"],"tag":["setMap"],"description":"Set, ES6新增的数据类型。类似数组，成员值是唯一的，没有重复的值。 作用：可以去除重复的值，因为Set()的成员是唯一，没有重复的值 Set 实例属性 Set 实例操作方法（用于操作数据）【4】 Set 实例遍历方法（用于遍历成员）【4】 + for...of循环遍历 Map 本质上是键值对的集合（Hash 结构）","head":[["meta",{"property":"og:url","content":"https://your.domain/base/es6/setmap.html"}],["meta",{"property":"og:site_name","content":"Docs Demo"}],["meta",{"property":"og:title","content":"9. setMap"}],["meta",{"property":"og:description","content":"Set, ES6新增的数据类型。类似数组，成员值是唯一的，没有重复的值。 作用：可以去除重复的值，因为Set()的成员是唯一，没有重复的值 Set 实例属性 Set 实例操作方法（用于操作数据）【4】 Set 实例遍历方法（用于遍历成员）【4】 + for...of循环遍历 Map 本质上是键值对的集合（Hash 结构）"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"article:author","content":"ChorKiu"}],["meta",{"property":"article:tag","content":"setMap"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"9. setMap\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ChorKiu\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"Set,","slug":"set","link":"#set","children":[]},{"level":2,"title":"Map","slug":"map","link":"#map","children":[]}],"git":{},"readingTime":{"minutes":1.63,"words":489},"filePathRelative":"base/es6/setmap.md","autoDesc":true}');export{d as comp,k as data};
