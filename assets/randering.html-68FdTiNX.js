import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as e,c as a,e as f}from"./app-qKmLr34n.js";const i={},t=f('<p>渲染 （rander）</p><p><strong>html字符串 ——渲染——&gt; 像素信息</strong></p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/763fe58c6b8946548e5cd18cd728a1e5~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=826&amp;h=392&amp;s=136451&amp;e=png&amp;b=fdfdfd" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><figure><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a47db45040244ccbb25aa6a1d0f02e86~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=774&amp;h=453&amp;s=42359&amp;e=png&amp;b=fbf6f5" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/82e62b1b6a1f4947a1fb5b6f0181b3de~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=843&amp;h=460&amp;s=49058&amp;e=png&amp;b=fbf8f7" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h2 id="浏览器是如何渲染页面的" tabindex="-1"><a class="header-anchor" href="#浏览器是如何渲染页面的"><span>浏览器是如何渲染页面的？</span></a></h2><p>当浏览器的网络线程收到 HTML 文档后，会产生一个<strong>渲染任务</strong>，并将其传递给<strong>渲染主线程的消息队列</strong>。</p><p>在事件循环机制的作用下，渲染主线程取出消息队列中的渲染任务，开启渲染流程。</p><p>整个渲染流程分为多个阶段，分别是:HTML 解析、样式计算、布局、分层、绘制、分块、光棚化、画</p><p>每个阶段都有明确的输入输出，上一个阶段的输出会成为下一个阶段的输入。</p><p>这样，整个渲染流程就形成了一套组织严密的生产流水线。</p><h3 id="_1、解析-html-parse-html" tabindex="-1"><a class="header-anchor" href="#_1、解析-html-parse-html"><span>1、<em>解析 HTML（Parse HTML）</em></span></a></h3><p>解析过程中遇到 CSS 解析 CSS，遇到 JS 执行 JS。为了提高解析效率，浏览器在开始解析前，会启动一个预解析的线程，<strong>率先下载HTML中的外部CSS 文件和 外部的JS 文件</strong>。</p><p><strong>如果主线程解析到 <code>link </code>位置，此时外部的 CSS 文件还没有下载解析好，主线程不会等待，继续解析后续的HTML。这是因为下载和解析 CSS 的工作是在预解析线程中进行的。这就是CSS 不会阻塞 HTML 解析的根本原因。</strong></p><p>如果主线程解析到 <code>script</code> 位置，会停止解析 HTML，转而等待 JS 文件下载好，并将全局代码解析执行完成后，才能继续解析 HTML。这是<strong>因为JS 代码的执行过程可能会修改当前的 DOM 树，所以 DOM 树的生成必须暂停</strong>。这就是 JS 会阻塞 HTML解析的根本原因。</p><p>第一步完成后，会得到 DOM 树和CSSOM 树，浏览器的默认样式、内部样式、外部样式、行内样式均会包含在CSSOM 树中。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2009151292eb43329fba1bdc91b1c313~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=520&amp;h=323&amp;s=41428&amp;e=png&amp;b=fdfbfb" alt="image.png" loading="lazy"><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e5f60d4c8cea4923b804b5b913cf8057~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=598&amp;h=275&amp;s=36562&amp;e=png&amp;b=fefefe" alt="image.png" loading="lazy"><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c23a701610b941969a99d96f1cebfab1~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=594&amp;h=278&amp;s=28781&amp;e=png&amp;b=fffefe" alt="image.png" loading="lazy"><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3d2922b7176c4e058fd20ce600525d79~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1256&amp;h=794&amp;s=243020&amp;e=png&amp;b=2b2b2b" alt="image.png" loading="lazy"><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/deb8a8ce9be047f18ff8b40209b1d912~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1920&amp;h=915&amp;s=307837&amp;e=png&amp;b=fdfcfc" alt="image.png" loading="lazy"></p><h4 id="常见问题-html-解析过程中遇到-css-代码怎么办" tabindex="-1"><a class="header-anchor" href="#常见问题-html-解析过程中遇到-css-代码怎么办"><span>常见问题：HTML 解析过程中遇到 CSS 代码怎么办？</span></a></h4><p>为了提⾼解析效率，浏览器会启动⼀个预解析器率先下载和解析 CSS</p><figure><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/acb83847704547c9a2342e7f0106b1a3~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=473&amp;h=249&amp;s=19880&amp;e=png&amp;b=fefafa" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h4 id="常见问题-html-解析过程中遇到-js-代码怎么办" tabindex="-1"><a class="header-anchor" href="#常见问题-html-解析过程中遇到-js-代码怎么办"><span>常见问题：HTML 解析过程中遇到 JS 代码怎么办？</span></a></h4><p>渲染主线程遇到 JS 时必须暂停⼀切⾏为，等待下载执⾏完后才能继续 预解析线程可以分担⼀点下载 JS 的任务</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/efac87a6d975433da4bd6647252563d1~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=471&amp;h=257&amp;s=25805&amp;e=png&amp;b=fdf9f9" alt="image.png" loading="lazy"> 最终</p><figure><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e7631e4c8fec4d048e04c95c4fa08dde~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=515&amp;h=310&amp;s=41039&amp;e=png&amp;b=fdfbfb" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h3 id="_2、样式计算-recalculate-style" tabindex="-1"><a class="header-anchor" href="#_2、样式计算-recalculate-style"><span>2、<em>样式计算（Recalculate Style）</em></span></a></h3><p>主线程会遍历得到的DOM树，依次为树中的每个节点计算出它最终的样式，称之为Computed Style。</p><p>在这一过程中，很多预设值会变成绝对值，比如<code>red</code>会变成<code>rgb(255,0,0)</code>;相对单位会变成绝对单位，比如<code>em</code>变成<code>px</code>。</p><p>这一步完成后，会得到一颗带有样式的DOM树。</p><figure><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9d79361f10be4e6caf8fe460952cc415~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=553&amp;h=320&amp;s=24854&amp;e=png&amp;b=fefcfc" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h3 id="_3、布局-layout-布局完成后会得到布局树" tabindex="-1"><a class="header-anchor" href="#_3、布局-layout-布局完成后会得到布局树"><span>3、<em>布局（Layout）</em>，布局完成后会得到布局树</span></a></h3><p>布局阶段会依次遍历 DOM 树的每一个节点，计算每个节点的几何信息。例如节点的宽高、相对包含块的位置。</p><p><strong>大部分时候，DOM 树和布局树并非一一对应</strong></p><p>比如<code> display:none</code> 的节点没有几何信息，因此不会生成到布局树;又比如使用了<code>伪元素选择器</code>（例如<code>::before</code>、<code>::after</code>、<code>::first-child</code>），虽然 DOM树中不存在这些伪元素节点，但它们拥有几何信息，所以会生成到布局树中。还有匿名行盒、匿名块盒等等都会导致 DOM 树和布局树无法一一对应。 <img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8848246088854477ab070333d6f5191e~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=537&amp;h=240&amp;s=15460&amp;e=png&amp;b=fefefe" alt="image.png" loading="lazy"></p><figure><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/373f69bf2d5b46bc966a33368df74663~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=549&amp;h=253&amp;s=20739&amp;e=png&amp;b=fefbfb" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><figure><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ee7d108f460741f39e2c7317737ef039~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=526&amp;h=293&amp;s=23235&amp;e=png&amp;b=fefdfd" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7d60106e89ee4657a194d92b0ffac951~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=561&amp;h=334&amp;s=34808&amp;e=png&amp;b=fefcfc" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h3 id="_4、分层-layer" tabindex="-1"><a class="header-anchor" href="#_4、分层-layer"><span>4、<em>分层（Layer）</em></span></a></h3><p>主线程会使用一套复杂的策略对整个布局树中进行分层。</p><p>分层的好处在于，将来某一个层改变后，仅会对该层进行后续处理，从而提升效率。</p><p><code>滚动条、堆叠上下文、transform、opacity</code> 等样式都会或多或少的影响分层结果，也可以通过 <code>will-change</code> 属性更大程度的影响分层结果。</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7c1c93c3032549f8a72ce85e4b2a43d4~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=538&amp;h=253&amp;s=27121&amp;e=png&amp;b=fdfcfc" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/889071f06b334791adb47dec77cc221b~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1657&amp;h=610&amp;s=104154&amp;e=png&amp;b=fefefe" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h3 id="_5、绘制-paint" tabindex="-1"><a class="header-anchor" href="#_5、绘制-paint"><span>5、<em>绘制（Paint）</em></span></a></h3><p>主线程会为每个层单独产生绘制指令集，用于描述这一层的内容该如何画出来。</p><figure><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4b194a0cd1404282b3c0013a038e0af8~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=539&amp;h=293&amp;s=37781&amp;e=png&amp;b=fdfafa" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4dcb204503054f3bb54515f47ee733bd~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=506&amp;h=240&amp;s=25884&amp;e=png&amp;b=fdfaf9" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><blockquote><p>完成绘制后，主线程将每个图层的绘制信息提交给合成线程，剩余工作将由合成线程完成。</p><p>合成线程首先对每个图层进行分块，将其划分为更多的小区域。</p><p>它会从线程池中拿取多个线程来完成分块工作。</p></blockquote><figure><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b7b3276f7ec7442c8f5f56e60ed4a2a9~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=445&amp;h=260&amp;s=25115&amp;e=png&amp;b=fcf7f6" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><figure><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cb11884063c6426f8a7c7dc9e140cb87~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=517&amp;h=274&amp;s=28184&amp;e=png&amp;b=fdf9f8" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h3 id="_6、光栅化阶段-raster-。" tabindex="-1"><a class="header-anchor" href="#_6、光栅化阶段-raster-。"><span>6、<em>光栅化阶段（Raster）</em>。</span></a></h3><p>合成线程会将块信息交给 GPU 进程，以极高的速度完成光化。</p><p>GPU 进程会开启多个线程来完成光栅化，并且<strong>优先处理靠近视口区域的块</strong>，</p><p>光栅化的结果，就是一块一块的位图</p><figure><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8b45c59282b14afe9a7e4d0382bbba34~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=453&amp;h=248&amp;s=27388&amp;e=png&amp;b=fefafa" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><figure><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9e5042e8aba44cc38c1d304c1b1276fe~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=489&amp;h=228&amp;s=16759&amp;e=png&amp;b=fffbfb" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h3 id="_7、画-draw" tabindex="-1"><a class="header-anchor" href="#_7、画-draw"><span>7、<em>画（Draw）</em></span></a></h3><p>合成线程拿到每个层、每个块的位图后，生成一个个「指引(quad)」信息。</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/215b703bc0a249208220171b717537a1~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=607&amp;h=290&amp;s=34058&amp;e=png&amp;b=fefbfb" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><figure><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0f1f5bf9cd954cab86c3555059463297~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=589&amp;h=268&amp;s=25695&amp;e=png&amp;b=fdfbfb" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>**指引会标识出每个位图应该画到屏幕的哪个位置，以及会考虑到旋转、缩放等变形。</p><p>变形发生在合成线程，与渲染主线程无关，这就是 transform 效率高的本质原因。</p><p>合成线程会把 quad 提交给 GPU进程，由 GPU 进程产生系统调用，提交给 GPU 硬件，完成最终的屏幕成像**</p><h1 id="补充问题" tabindex="-1"><a class="header-anchor" href="#补充问题"><span>补充问题：</span></a></h1><h2 id="什么是reflow" tabindex="-1"><a class="header-anchor" href="#什么是reflow"><span>什么是reflow？</span></a></h2><figure><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d5469b0efc8248ebbcb279f6e423f88e~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=536&amp;h=196&amp;s=16539&amp;e=png&amp;b=fefcfc" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>reflow 的本质就是<strong>重新计算 layout 树</strong>。</p><p>当进行了会影响布局树的操作后，需要重新计算布局树，会引发 layout。</p><p>为了避免连续的多次操作导致布局树反复计算，浏览器会合并这些操作，当 JS 代码全部完成后再进行统一计算。所以，改动属性造成的 reflow 是异步完成的。</p><p>也同样因为如此，当 JS 获取布局属性时，就可能造成无法获取到最新的布局信息。</p><p>浏览器在反复权衡下，最终决定获取属性立即reflow。</p><h2 id="什么是-repaint" tabindex="-1"><a class="header-anchor" href="#什么是-repaint"><span>什么是 repaint?</span></a></h2><figure><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0221d4b851a743af9562f5f2bbd3d4bc~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=548&amp;h=199&amp;s=15719&amp;e=png&amp;b=fefefe" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>repaint 的本质就是<strong>重新根据分层信息计算了绘制指令</strong>。</p><p>当改动了可见样式后，就需要重新计算，会引发repaint。</p><p>由于元素的布局信息也属于可见样式，所以<strong>reflow 一定会引起repaint</strong>。</p><h2 id="为什么-transform-的效率高" tabindex="-1"><a class="header-anchor" href="#为什么-transform-的效率高"><span>为什么 transform 的效率高?</span></a></h2><figure><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8029bcee915d4478896f7c0d091c7f76~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=546&amp;h=199&amp;s=17600&amp;e=png&amp;b=fefcfc" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>因为 transform 既不会影响布局也不会影响绘制指令，它<strong>影响的只是渲染流程的最后一个「draw」阶段</strong></p><figure><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d98b16cacd974f7594095471a7a01d94~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=544&amp;h=236&amp;s=19118&amp;e=png&amp;b=fdfcfc" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>由于 draw 阶段在合成线程中，所以 transform 的变化几乎不会影响演染主线程。反之，渲染主线程无论如何忙碌，也不会影响 transform 的变化。</p>',80),c=[t];function n(m,g){return e(),a("div",null,c)}const o=p(i,[["render",n],["__file","randering.html.vue"]]),s=JSON.parse('{"path":"/zh/browser/randering.html","title":"1. 浏览器渲染原理","lang":"zh-CN","frontmatter":{"title":"1. 浏览器渲染原理","icon":"object-group","order":1,"category":["Guide"],"tag":["浏览器渲染原理"],"description":"渲染 （rander） html字符串 ——渲染——> 像素信息 image.pngimage.png image.pngimage.png image.pngimage.png 浏览器是如何渲染页面的？ 当浏览器的网络线程收到 HTML 文档后，会产生一个渲染任务，并将其传递给渲染主线程的消息队列。 在事件循环机制的作用下，渲染主线程取出消息队列中的...","head":[["link",{"rel":"alternate","hreflang":"en-us","href":"https://your.domain/browser/randering.html"}],["meta",{"property":"og:url","content":"https://your.domain/zh/browser/randering.html"}],["meta",{"property":"og:site_name","content":"文档演示"}],["meta",{"property":"og:title","content":"1. 浏览器渲染原理"}],["meta",{"property":"og:description","content":"渲染 （rander） html字符串 ——渲染——> 像素信息 image.pngimage.png image.pngimage.png image.pngimage.png 浏览器是如何渲染页面的？ 当浏览器的网络线程收到 HTML 文档后，会产生一个渲染任务，并将其传递给渲染主线程的消息队列。 在事件循环机制的作用下，渲染主线程取出消息队列中的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/763fe58c6b8946548e5cd18cd728a1e5~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=826&h=392&s=136451&e=png&b=fdfdfd"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"article:author","content":"ChorKiu"}],["meta",{"property":"article:tag","content":"浏览器渲染原理"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"1. 浏览器渲染原理\\",\\"image\\":[\\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/763fe58c6b8946548e5cd18cd728a1e5~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=826&h=392&s=136451&e=png&b=fdfdfd\\",\\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a47db45040244ccbb25aa6a1d0f02e86~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=774&h=453&s=42359&e=png&b=fbf6f5\\",\\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/82e62b1b6a1f4947a1fb5b6f0181b3de~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=843&h=460&s=49058&e=png&b=fbf8f7\\",\\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2009151292eb43329fba1bdc91b1c313~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=520&h=323&s=41428&e=png&b=fdfbfb\\",\\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e5f60d4c8cea4923b804b5b913cf8057~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=598&h=275&s=36562&e=png&b=fefefe\\",\\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c23a701610b941969a99d96f1cebfab1~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=594&h=278&s=28781&e=png&b=fffefe\\",\\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3d2922b7176c4e058fd20ce600525d79~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1256&h=794&s=243020&e=png&b=2b2b2b\\",\\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/deb8a8ce9be047f18ff8b40209b1d912~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1920&h=915&s=307837&e=png&b=fdfcfc\\",\\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/acb83847704547c9a2342e7f0106b1a3~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=473&h=249&s=19880&e=png&b=fefafa\\",\\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/efac87a6d975433da4bd6647252563d1~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=471&h=257&s=25805&e=png&b=fdf9f9\\",\\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e7631e4c8fec4d048e04c95c4fa08dde~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=515&h=310&s=41039&e=png&b=fdfbfb\\",\\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9d79361f10be4e6caf8fe460952cc415~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=553&h=320&s=24854&e=png&b=fefcfc\\",\\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8848246088854477ab070333d6f5191e~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=537&h=240&s=15460&e=png&b=fefefe\\",\\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/373f69bf2d5b46bc966a33368df74663~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=549&h=253&s=20739&e=png&b=fefbfb\\",\\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ee7d108f460741f39e2c7317737ef039~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=526&h=293&s=23235&e=png&b=fefdfd\\",\\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7d60106e89ee4657a194d92b0ffac951~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=561&h=334&s=34808&e=png&b=fefcfc\\",\\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7c1c93c3032549f8a72ce85e4b2a43d4~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=538&h=253&s=27121&e=png&b=fdfcfc\\",\\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/889071f06b334791adb47dec77cc221b~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1657&h=610&s=104154&e=png&b=fefefe\\",\\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4b194a0cd1404282b3c0013a038e0af8~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=539&h=293&s=37781&e=png&b=fdfafa\\",\\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4dcb204503054f3bb54515f47ee733bd~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=506&h=240&s=25884&e=png&b=fdfaf9\\",\\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b7b3276f7ec7442c8f5f56e60ed4a2a9~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=445&h=260&s=25115&e=png&b=fcf7f6\\",\\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cb11884063c6426f8a7c7dc9e140cb87~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=517&h=274&s=28184&e=png&b=fdf9f8\\",\\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8b45c59282b14afe9a7e4d0382bbba34~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=453&h=248&s=27388&e=png&b=fefafa\\",\\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9e5042e8aba44cc38c1d304c1b1276fe~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=489&h=228&s=16759&e=png&b=fffbfb\\",\\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/215b703bc0a249208220171b717537a1~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=607&h=290&s=34058&e=png&b=fefbfb\\",\\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0f1f5bf9cd954cab86c3555059463297~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=589&h=268&s=25695&e=png&b=fdfbfb\\",\\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d5469b0efc8248ebbcb279f6e423f88e~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=536&h=196&s=16539&e=png&b=fefcfc\\",\\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0221d4b851a743af9562f5f2bbd3d4bc~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=548&h=199&s=15719&e=png&b=fefefe\\",\\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8029bcee915d4478896f7c0d091c7f76~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=546&h=199&s=17600&e=png&b=fefcfc\\",\\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d98b16cacd974f7594095471a7a01d94~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=544&h=236&s=19118&e=png&b=fdfcfc\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ChorKiu\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"浏览器是如何渲染页面的？","slug":"浏览器是如何渲染页面的","link":"#浏览器是如何渲染页面的","children":[{"level":3,"title":"1、解析 HTML（Parse HTML）","slug":"_1、解析-html-parse-html","link":"#_1、解析-html-parse-html","children":[]},{"level":3,"title":"2、样式计算（Recalculate Style）","slug":"_2、样式计算-recalculate-style","link":"#_2、样式计算-recalculate-style","children":[]},{"level":3,"title":"3、布局（Layout），布局完成后会得到布局树","slug":"_3、布局-layout-布局完成后会得到布局树","link":"#_3、布局-layout-布局完成后会得到布局树","children":[]},{"level":3,"title":"4、分层（Layer）","slug":"_4、分层-layer","link":"#_4、分层-layer","children":[]},{"level":3,"title":"5、绘制（Paint）","slug":"_5、绘制-paint","link":"#_5、绘制-paint","children":[]},{"level":3,"title":"6、光栅化阶段（Raster）。","slug":"_6、光栅化阶段-raster-。","link":"#_6、光栅化阶段-raster-。","children":[]},{"level":3,"title":"7、画（Draw）","slug":"_7、画-draw","link":"#_7、画-draw","children":[]}]},{"level":2,"title":"什么是reflow？","slug":"什么是reflow","link":"#什么是reflow","children":[]},{"level":2,"title":"什么是 repaint?","slug":"什么是-repaint","link":"#什么是-repaint","children":[]},{"level":2,"title":"为什么 transform 的效率高?","slug":"为什么-transform-的效率高","link":"#为什么-transform-的效率高","children":[]}],"git":{},"readingTime":{"minutes":8.1,"words":2429},"filePathRelative":"zh/browser/randering.md","autoDesc":true}');export{o as comp,s as data};
