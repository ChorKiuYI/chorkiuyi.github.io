import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as e,c as n,e as s}from"./app-qKmLr34n.js";const t={},o=s(`<h1 id="设置请求头" tabindex="-1"><a class="header-anchor" href="#设置请求头"><span>设置请求头</span></a></h1><h2 id="方法1-if-modified-since设置成0" tabindex="-1"><a class="header-anchor" href="#方法1-if-modified-since设置成0"><span>方法1：If-Modified-Since设置成0</span></a></h2><p><code>If-Modified-Since</code>请求的HTTP标头发出请求的条件：只有当它已经给定的日期之后被最后修改，服务器才会返回所请求的资源，状态为200。如果资源此后没有被改过，则相应是一个没有任何正文的304返回。当设置为0的时候，相当于<strong>绕过浏览器的缓存，不直接读取缓存数据</strong>。</p><h2 id="方法2-cache-control-pragma设置" tabindex="-1"><a class="header-anchor" href="#方法2-cache-control-pragma设置"><span>方法2：Cache-Control，Pragma设置</span></a></h2><p>请求头将<code>Cache-Control</code>的值设置 <code>no-cache</code> 和 <code>Pragma </code>的值设置为<code>no-cache</code>。高速浏览器不要缓存请求内容。</p><ul><li><strong><code>Cache-Control</code></strong> 通用消息头字段，被用于在 http 请求和响应中，通过指定指令来实现缓存机制。缓存指令是单向的，这意味着在请求中设置的指令，不一定被包含在响应中。</li><li><code>Pragma</code> 是 HTTP 1.0 中的头部字段，用于指定缓存的行为，与 Cache-Control 类似。</li></ul><h1 id="url后面添加时间戳或随机数" tabindex="-1"><a class="header-anchor" href="#url后面添加时间戳或随机数"><span>URL后面添加时间戳或随机数</span></a></h1><p>URL后面添加时间戳或者随机数原理其实差不多，就是确保每次发送的请求 URL 都是不同的，因此浏览器不会从缓存中获取相同的 URL。</p><h2 id="方法3-在url后面加上一个随机数" tabindex="-1"><a class="header-anchor" href="#方法3-在url后面加上一个随机数"><span>方法3：在URL后面加上一个随机数</span></a></h2><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> randomNumber <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 生成随机数</span>
<span class="token keyword">var</span> url <span class="token operator">=</span> <span class="token string">&quot;example.com/api/data?rand=&quot;</span> <span class="token operator">+</span> randomNumber<span class="token punctuation">;</span>

<span class="token comment">// 发送请求</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="方法4-在url后面加上时间戳" tabindex="-1"><a class="header-anchor" href="#方法4-在url后面加上时间戳"><span>方法4：在URL后面加上时间戳</span></a></h2><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> timestamp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取当前时间戳</span>
<span class="token keyword">var</span> url <span class="token operator">=</span> <span class="token string">&quot;example.com/api/data?timestamp=&quot;</span> <span class="token operator">+</span> timestamp<span class="token punctuation">;</span>

 <span class="token comment">// 发送请求...</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12),c=[o];function r(i,l){return e(),n("div",null,c)}const u=a(t,[["render",r],["__file","cache.html.vue"]]),m=JSON.parse('{"path":"/browser/cache.html","title":"3. 解决浏览器缓存问题","lang":"en-US","frontmatter":{"title":"3. 解决浏览器缓存问题","icon":"object-group","order":3,"category":["Guide"],"tag":["解决浏览器缓存问题"],"description":"设置请求头 方法1：If-Modified-Since设置成0 If-Modified-Since请求的HTTP标头发出请求的条件：只有当它已经给定的日期之后被最后修改，服务器才会返回所请求的资源，状态为200。如果资源此后没有被改过，则相应是一个没有任何正文的304返回。当设置为0的时候，相当于绕过浏览器的缓存，不直接读取缓存数据。 方法2：Cach...","head":[["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://your.domain/zh/browser/cache.html"}],["meta",{"property":"og:url","content":"https://your.domain/browser/cache.html"}],["meta",{"property":"og:site_name","content":"Docs Demo"}],["meta",{"property":"og:title","content":"3. 解决浏览器缓存问题"}],["meta",{"property":"og:description","content":"设置请求头 方法1：If-Modified-Since设置成0 If-Modified-Since请求的HTTP标头发出请求的条件：只有当它已经给定的日期之后被最后修改，服务器才会返回所请求的资源，状态为200。如果资源此后没有被改过，则相应是一个没有任何正文的304返回。当设置为0的时候，相当于绕过浏览器的缓存，不直接读取缓存数据。 方法2：Cach..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"article:author","content":"ChorKiu"}],["meta",{"property":"article:tag","content":"解决浏览器缓存问题"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"3. 解决浏览器缓存问题\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ChorKiu\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"方法1：If-Modified-Since设置成0","slug":"方法1-if-modified-since设置成0","link":"#方法1-if-modified-since设置成0","children":[]},{"level":2,"title":"方法2：Cache-Control，Pragma设置","slug":"方法2-cache-control-pragma设置","link":"#方法2-cache-control-pragma设置","children":[]},{"level":2,"title":"方法3：在URL后面加上一个随机数","slug":"方法3-在url后面加上一个随机数","link":"#方法3-在url后面加上一个随机数","children":[]},{"level":2,"title":"方法4：在URL后面加上时间戳","slug":"方法4-在url后面加上时间戳","link":"#方法4-在url后面加上时间戳","children":[]}],"git":{},"readingTime":{"minutes":1.39,"words":416},"filePathRelative":"browser/cache.md","autoDesc":true}');export{u as comp,m as data};
