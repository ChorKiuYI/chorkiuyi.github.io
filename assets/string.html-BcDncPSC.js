import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app-qKmLr34n.js";const e={},p=t(`<p>#字符串扩展</p><h2 id="字符串可以被for-of循环遍历" tabindex="-1"><a class="header-anchor" href="#字符串可以被for-of循环遍历"><span>字符串可以被<code>for...of</code>循环遍历</span></a></h2><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> <span class="token string">&#39;demo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//d</span>
<span class="token comment">//e</span>
<span class="token comment">//m</span>
<span class="token comment">//o</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="模板字符串" tabindex="-1"><a class="header-anchor" href="#模板字符串"><span>模板字符串</span></a></h2><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">&#39;小明&#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">你好</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//你好小明</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>#4.字符串新增方法</p><h2 id="includes-startswith-endswith" tabindex="-1"><a class="header-anchor" href="#includes-startswith-endswith"><span>includes(), startsWith(), endsWith()</span></a></h2><p>传统上，JavaScript 只有indexOf方法，可以用来确定一个字符串是否包含在另一个字符串中。ES6 又提供了三种新方法。</p><ul><li><code>includes(str,n)</code>：返回布尔值，表示是否找到了参数字符串。</li><li><code>startsWith(str,n)</code>：返回布尔值，表示参数字符串是否在原字符串的头部。</li><li><code>endsWith(str,n)</code>：返回布尔值，表示参数字符串是否在原字符串的尾部。</li><li>str——代表参考的字符串</li><li>n —— 第几个</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token string">&#39;hello word!&#39;</span>
s<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;llo&#39;</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
s<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;llo&#39;</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// false 索引不对</span>

s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;word&#39;</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;word&#39;</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment">// false 索引不对</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>endsWith</code>的行为与其他两个方法有所不同。它针对前n个字符，而其他两个方法针对从第n个位置直到字符串结束。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>s<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&#39;wor&#39;</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
s<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&#39;llo&#39;</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="repeat" tabindex="-1"><a class="header-anchor" href="#repeat"><span>repeat()</span></a></h2><p><code>repeat</code>方法<strong>返回一个新字符串</strong>，表示将原字符串重复<code>n</code>次。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token string">&#39;hello!&#39;</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// hello!hello!hello!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="padstart-和-padend" tabindex="-1"><a class="header-anchor" href="#padstart-和-padend"><span>padStart() 和 padEnd()</span></a></h2><p>ES2017 引入了字符串补全长度的功能。如果某个字符串不够指定长度，会在头部或尾部补全。<code>padStart()</code>用于头部补全，<code>padEnd()</code>用于尾部补全。</p><p>padStart()和padEnd()一共接受两个参数，</p><ul><li>第一个参数是字符串补全生效的最大长度，</li><li>第二个参数是用来补全的字符串。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token string">&#39;ad&#39;</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">&#39;012346789&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 01234678ad</span>
<span class="token string">&#39;ad&#39;</span><span class="token punctuation">.</span><span class="token function">padEnd</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">&#39;012346789&#39;</span><span class="token punctuation">)</span>  <span class="token comment">// ad01234678</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="trimstart-、trimend" tabindex="-1"><a class="header-anchor" href="#trimstart-、trimend"><span>trimStart()、trimEnd()</span></a></h2><p>ES2019 对字符串实例新增了<code>trimStart()</code>和<code>trimEnd()</code>这两个方法。它们的行为与<code>trim()</code>一致，<code>trimStart()</code>消除字符串头部的空格，<code>trimEnd()</code>消除尾部的空格。它们<strong>返回的都是新字符串，不会修改原始字符串</strong>。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token string">&#39;  anb    &#39;</span><span class="token punctuation">;</span>
s<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// &#39;anb&#39;</span>
s<span class="token punctuation">.</span><span class="token function">trimStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// &#39;anb    &#39;</span>
s<span class="token punctuation">.</span><span class="token function">trimEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// &#39;  anb&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="replaceall" tabindex="-1"><a class="header-anchor" href="#replaceall"><span>replaceAll()</span></a></h2><p>字符串的实例方法replace()只能替换第一个匹配</p><div class="language-JS line-numbers-mode" data-ext="JS" data-title="JS"><pre class="language-JS"><code>&#39;aabbcc&#39;.replace(&#39;b&#39;, &#39;_&#39;) // &#39;aa_bcc&#39;
&#39;aabbcc&#39;.replaceAll(&#39;b&#39;, &#39;_&#39;) // &#39;aa__cc&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,26),c=[p];function i(l,o){return s(),a("div",null,c)}const u=n(e,[["render",i],["__file","string.html.vue"]]),m=JSON.parse('{"path":"/es6/string.html","title":"3. 字符串扩展","lang":"en-US","frontmatter":{"title":"3. 字符串扩展","icon":"object-group","order":3,"category":["Guide"],"tag":["字符串扩展"],"description":"#字符串扩展 字符串可以被for...of循环遍历 模板字符串 #4.字符串新增方法 includes(), startsWith(), endsWith() 传统上，JavaScript 只有indexOf方法，可以用来确定一个字符串是否包含在另一个字符串中。ES6 又提供了三种新方法。 includes(str,n)：返回布尔值，表示是否找到了参数...","head":[["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://your.domain/zh/es6/string.html"}],["meta",{"property":"og:url","content":"https://your.domain/es6/string.html"}],["meta",{"property":"og:site_name","content":"Docs Demo"}],["meta",{"property":"og:title","content":"3. 字符串扩展"}],["meta",{"property":"og:description","content":"#字符串扩展 字符串可以被for...of循环遍历 模板字符串 #4.字符串新增方法 includes(), startsWith(), endsWith() 传统上，JavaScript 只有indexOf方法，可以用来确定一个字符串是否包含在另一个字符串中。ES6 又提供了三种新方法。 includes(str,n)：返回布尔值，表示是否找到了参数..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"article:author","content":"ChorKiu"}],["meta",{"property":"article:tag","content":"字符串扩展"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"3. 字符串扩展\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ChorKiu\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"字符串可以被for...of循环遍历","slug":"字符串可以被for-of循环遍历","link":"#字符串可以被for-of循环遍历","children":[]},{"level":2,"title":"模板字符串","slug":"模板字符串","link":"#模板字符串","children":[]},{"level":2,"title":"includes(), startsWith(), endsWith()","slug":"includes-startswith-endswith","link":"#includes-startswith-endswith","children":[]},{"level":2,"title":"repeat()","slug":"repeat","link":"#repeat","children":[]},{"level":2,"title":"padStart() 和 padEnd()","slug":"padstart-和-padend","link":"#padstart-和-padend","children":[]},{"level":2,"title":"trimStart()、trimEnd()","slug":"trimstart-、trimend","link":"#trimstart-、trimend","children":[]},{"level":2,"title":"replaceAll()","slug":"replaceall","link":"#replaceall","children":[]}],"git":{},"readingTime":{"minutes":1.85,"words":556},"filePathRelative":"es6/string.md","autoDesc":true}');export{u as comp,m as data};
