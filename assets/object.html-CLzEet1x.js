import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app-qKmLr34n.js";const e={},p=t(`<h1 id="对象扩展" tabindex="-1"><a class="header-anchor" href="#对象扩展"><span>对象扩展</span></a></h1><h2 id="属性名表达式" tabindex="-1"><a class="header-anchor" href="#属性名表达式"><span>属性名表达式</span></a></h2><p>属性名表达式对于拿去有规律的对象挺有用的，意味着属性可以是一个变量</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
obj<span class="token punctuation">[</span><span class="token string">&#39;demo&#39;</span><span class="token operator">+</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;123&#39;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>demo1<span class="token punctuation">)</span> <span class="token comment">// &#39;123&#39;</span>

<span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">&#39;demo1Name&#39;</span>
obj<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;demo1的名称&#39;</span>

<span class="token comment">// 此时的obj</span>
<span class="token comment">// {demo1: &#39;123&#39;, demo1Name: &#39;demo1的名称&#39;}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="object-getownpropertydescriptor" tabindex="-1"><a class="header-anchor" href="#object-getownpropertydescriptor"><span>Object.getOwnPropertyDescriptor</span></a></h2><p>Object.getOwnPropertyDescriptor方法可以获取该属性的描述对象。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;小明&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">12</span> <span class="token punctuation">}</span>
<span class="token keyword">let</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;小红&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">11</span> <span class="token punctuation">}</span>
Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span> <span class="token comment">// 冻结</span>
Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>obj1<span class="token punctuation">,</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// {value: &#39;小明&#39;, writable: true, enumerable: true, configurable: true}</span>
Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>obj2<span class="token punctuation">,</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// {value: &#39;小红&#39;, writable: false, enumerable: true, configurable: false}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="遍历对象" tabindex="-1"><a class="header-anchor" href="#遍历对象"><span>遍历对象</span></a></h2><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>for...in</td><td><code>for...in</code>循环遍历对象自身的和继承的可枚举属性（不含 Symbol 属性）</td></tr><tr><td>Object.keys(obj)</td><td><code>Object.keys</code>返回一个数组，包括对象自身的（不含继承的）所有可枚举属性（不含 Symbol 属性）的键名</td></tr><tr><td>Object.getOwnPropertyNames(obj)</td><td><code>Object.getOwnPropertyNames</code>返回一个数组，包含对象自身的所有属性（不含 Symbol 属性，但是包括不可枚举属性）的键名</td></tr><tr><td>Object.getOwnPropertySymbols(obj)</td><td><code>Object.getOwnPropertySymbols</code>返回一个数组，包含对象自身的所有 Symbol 属性的键名</td></tr><tr><td>Reflect.ownKeys(obj)</td><td><code>Reflect.ownKeys</code>返回一个数组，包含对象自身的（不含继承的）所有键名，不管键名是 Symbol 或字符串，也不管是否可枚举</td></tr></tbody></table><h2 id="super关键字" tabindex="-1"><a class="header-anchor" href="#super关键字"><span>super关键字</span></a></h2><p>关键字super，指向当前对象的原型对象 注意，super关键字表示原型对象时，只能用在对象的方法之中，用在其他地方都会报错。</p><p>Object.setPrototypeOf():用来设置一个对象的原型对象（prototype），返回参数对象本身。 Object.getPrototypeOf():用于读取一个对象的原型对象（prototype）</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> proto <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token string">&#39;proto内容&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token string">&#39;super-obj1&#39;</span><span class="token punctuation">,</span>
<span class="token comment">//   目前，只有对象方法的简写法可以让 JavaScript 引擎确认，定义的是对象的方法。 也就是只能下面这样子写方法</span>
  <span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 通过super.foo引用了原型对象proto的foo属性</span>
    <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span>foo<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token string">&#39;this-obj2&#39;</span><span class="token punctuation">,</span>
  <span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>foo<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

obj1<span class="token punctuation">.</span>foo <span class="token comment">// &#39;super-obj1&#39;</span>
obj2<span class="token punctuation">.</span>foo <span class="token comment">// &#39;this-obj2&#39;</span>
Object<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span>obj1<span class="token punctuation">,</span> proto<span class="token punctuation">)</span><span class="token punctuation">;</span>
Object<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span>obj2<span class="token punctuation">,</span> proto<span class="token punctuation">)</span><span class="token punctuation">;</span>
obj1<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// &#39;proto内容&#39;</span>
obj2<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// &#39;this-obj2&#39;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="对象新增方法" tabindex="-1"><a class="header-anchor" href="#对象新增方法"><span>对象新增方法</span></a></h1><h2 id="object-is" tabindex="-1"><a class="header-anchor" href="#object-is"><span>Object.is()</span></a></h2><p>Object.is() 用来比较两个值是否严格相等，与严格比较运算符（=<mark>）的行为基本一致 比较方法 只有两个运算符：相等运算符（</mark>）和严格相等运算符（===）。它们都有缺点，前者会自动转换数据类型，后者的NaN不等于自身，以及+0等于-0。JavaScript 缺乏一种运算，在所有环境中，只要两个值是一样的，它们就应该相等。</p><table><thead><tr><th>方法</th><th>缺点</th><th>例子</th></tr></thead><tbody><tr><td>==</td><td>会自动转换数据类型，不能保证完全相等</td><td>1==&#39;1&#39; // true</td></tr><tr><td>===</td><td>不能判断NaN，+0===-0</td><td>NaN === NaN //false<br>+0===-0 // true</td></tr><tr><td>Object.is()</td><td>两个值是否严格相等</td><td>Object.is(+0,-0) //false <br>Object.is(NaN,NaN) // true</td></tr></tbody></table><h2 id="object-assign" tabindex="-1"><a class="header-anchor" href="#object-assign"><span>Object.assign()</span></a></h2><p>Object.assign()方法用于对象的合并，将源对象（source）的所有可枚举属性，复制到目标对象（target）</p><h3 id="基础用法" tabindex="-1"><a class="header-anchor" href="#基础用法"><span>基础用法</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> target <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> source1 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> source2 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> source1<span class="token punctuation">,</span> source2<span class="token punctuation">)</span><span class="token punctuation">;</span>
target <span class="token comment">// {a:1, b:2, c:3}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="常用注意" tabindex="-1"><a class="header-anchor" href="#常用注意"><span>常用注意</span></a></h3><h4 id="_1-object-assign-浅拷贝-复杂数据类型还是公用的" tabindex="-1"><a class="header-anchor" href="#_1-object-assign-浅拷贝-复杂数据类型还是公用的"><span>（1）Object.assign()浅拷贝,复杂数据类型还是公用的</span></a></h4><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">a</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token literal-property property">b</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token literal-property property">c</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">}</span>
<span class="token keyword">const</span> obj2 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>obj1<span class="token punctuation">)</span>
<span class="token comment">// 复杂数据类型</span>
obj1<span class="token punctuation">.</span>a<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">2</span>
obj2<span class="token punctuation">.</span>a<span class="token punctuation">.</span>b <span class="token comment">// 2 </span>
<span class="token comment">// 简单数据类型</span>
obj1<span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span>
obj2<span class="token punctuation">.</span>c <span class="token comment">// 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-同名属性替换-重复的话就会覆盖" tabindex="-1"><a class="header-anchor" href="#_2-同名属性替换-重复的话就会覆盖"><span>（2）同名属性替换 重复的话就会覆盖</span></a></h4><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> target <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token literal-property property">b</span><span class="token operator">:</span><span class="token number">2</span> <span class="token punctuation">}</span>
<span class="token keyword">var</span> source1 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">b</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token literal-property property">c</span><span class="token operator">:</span><span class="token number">4</span> <span class="token punctuation">}</span>
<span class="token keyword">var</span> source2 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">c</span><span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token literal-property property">d</span><span class="token operator">:</span><span class="token number">8</span> <span class="token punctuation">}</span>
Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span>source1<span class="token punctuation">,</span>source2<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {a: 1, b: 3, c: 5, d: 8}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="object-assign-常见用途" tabindex="-1"><a class="header-anchor" href="#object-assign-常见用途"><span>Object.assign()常见用途</span></a></h3><ul><li>为对象添加属性</li><li>为对象添加方法</li><li>克隆对象</li><li>合并多个对象</li><li>为属性制定默认值</li></ul><h2 id="object-getownpropertydescriptors" tabindex="-1"><a class="header-anchor" href="#object-getownpropertydescriptors"><span>Object.getOwnPropertyDescriptors()</span></a></h2><p><code>Object.getOwnPropertyDescriptor()</code>方法会返回<strong>某个对象属性</strong>的描述对象（descriptor）。 <code>Object.getOwnPropertyDescriptors()</code>方法，返回指定对象<strong>所有自身属性</strong>（非继承属性）的描述对象。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">a</span><span class="token operator">:</span><span class="token string">&#39;123&#39;</span><span class="token punctuation">,</span>
    <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&#39;abc&#39;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptors</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
<span class="token comment">// {</span>
<span class="token comment">//     &quot;a&quot;: {</span>
<span class="token comment">//         &quot;value&quot;: &quot;123&quot;,</span>
<span class="token comment">//         &quot;writable&quot;: true,</span>
<span class="token comment">//         &quot;enumerable&quot;: true,</span>
<span class="token comment">//         &quot;configurable&quot;: true</span>
<span class="token comment">//     },</span>
<span class="token comment">//     &quot;fn&quot;: {</span>
<span class="token comment">//         &quot;writable&quot;: true,</span>
<span class="token comment">//         &quot;enumerable&quot;: true,</span>
<span class="token comment">//         &quot;configurable&quot;: true</span>
<span class="token comment">//     }</span>
<span class="token comment">// }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="用处1-object-getownpropertydescriptors-方法配合object-defineproperties-方法-就可以实现正确拷贝-能拷贝target对象的属性-赋值方法、取值方法" tabindex="-1"><a class="header-anchor" href="#用处1-object-getownpropertydescriptors-方法配合object-defineproperties-方法-就可以实现正确拷贝-能拷贝target对象的属性-赋值方法、取值方法"><span>用处1：Object.getOwnPropertyDescriptors()方法配合Object.defineProperties()方法，就可以实现正确拷贝（能拷贝target对象的属性，赋值方法、取值方法）</span></a></h3><p>该方法的引入目的，主要是为了解决<code>Object.assign()</code>无法正确拷贝get属性和set属性的问题。 因为Object.assign方法总是拷贝一个属性的值，而不会拷贝它背后的赋值方法或取值方法(如下图)</p><p>首先要知道下面的基本方法作用</p><ul><li><code>Object.assign()</code>方法用于对象的合并，将源对象（source）的所有可枚举属性，复制到目标对象（target）</li><li><code>Object.defineProperties()</code>:在一个对象上定义新的属性或修改现有属性，并返回该对象</li><li><code>Object.getOwnPropertyDescriptors()</code>:返回指定对象<strong>所有自身属性</strong>（非继承属性）的描述对象</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// Object.assign()浅拷贝 </span>
<span class="token comment">// 缺点：无法正确拷贝get属性和set属性的问题（总是拷贝一个属性的值，而不会拷贝它背后的赋值方法或取值方法）</span>
<span class="token keyword">const</span> source <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token keyword">set</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 只用Object.assign()</span>
<span class="token keyword">const</span> target1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>target1<span class="token punctuation">,</span> source<span class="token punctuation">)</span><span class="token punctuation">;</span>
Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>target1<span class="token punctuation">,</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// {</span>
<span class="token comment">//     &quot;writable&quot;: true,</span>
<span class="token comment">//     &quot;enumerable&quot;: true,</span>
<span class="token comment">//     &quot;value&quot;: undefined</span>
<span class="token comment">//     &quot;configurable&quot;: true</span>
<span class="token comment">// }</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="用处2-object-getownpropertydescriptors-方法配合object-create-方法-将对象属性克隆到一个新对象。这属于浅拷贝" tabindex="-1"><a class="header-anchor" href="#用处2-object-getownpropertydescriptors-方法配合object-create-方法-将对象属性克隆到一个新对象。这属于浅拷贝"><span>用处2：Object.getOwnPropertyDescriptors()方法配合Object.create()方法，将对象属性克隆到一个新对象。这属于浅拷贝</span></a></h3><p>缺点：依然是浅拷贝</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> source <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token keyword">set</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// Object.getOwnPropertyDescriptors()配合Object.defineProperties()</span>
<span class="token comment">// 缺点：依然是浅拷贝</span>
<span class="token keyword">const</span> target2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
Object<span class="token punctuation">.</span><span class="token function">defineProperties</span><span class="token punctuation">(</span>target2<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptors</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Object.getOwnPropertyDescriptors(source) 打印如下</span>
<span class="token comment">// {</span>
<span class="token comment">//     &quot;foo&quot;: {</span>
<span class="token comment">//         &quot;enumerable&quot;: true,</span>
<span class="token comment">//         &quot;configurable&quot;: true,</span>
<span class="token comment">//         &quot;get&quot;: undefined</span>
<span class="token comment">//         &quot;set&quot;: ƒ foo(value)</span>
<span class="token comment">//     }</span>
<span class="token comment">// }</span>

Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>target2<span class="token punctuation">,</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// Object.getOwnPropertyDescriptor(target2, &#39;foo&#39;) 打印如下</span>
<span class="token comment">// {</span>
<span class="token comment">//     &quot;foo&quot;: {</span>
<span class="token comment">//         &quot;enumerable&quot;: true,</span>
<span class="token comment">//         &quot;configurable&quot;: true,</span>
<span class="token comment">//         &quot;get&quot;: undefined</span>
<span class="token comment">//         &quot;set&quot;: ƒ foo(value)</span>
<span class="token comment">//     }</span>
<span class="token comment">// }</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="原型对象的操作方法" tabindex="-1"><a class="header-anchor" href="#原型对象的操作方法"><span>原型对象的操作方法</span></a></h2><p>ES5 —— __proto__属性 ES6 —— Object.setPrototypeOf()、Object.getPrototypeOf()、Object.create() 首先要先了解<code>__proto__</code>是干嘛的，有什么用？为什么需要ES6的来替换？后续的方法有什么优点？ 首先介绍下面所涉及到的知识点：</p><ol><li>__proto__属性：用来读取或设置当前对象的原型对象（prototype）</li><li>Object.create（proto,prop）：用于创建一个新对象,使用现有的对象来提供新创建对象的原型对象。</li></ol><ul><li>proto - 必须,新创建对象的原型对象。</li><li>prop - 可选,设置属性及属性描述,默认值:undefined。</li></ul><ol start="3"><li>Object.setPrototypeOf(obj,proto)：与<code>__proto__</code>相同，用来设置一个对象的原型对象（prototype），返回参数对象本身。</li></ol><ul><li>obj：要设置原型对象的对象。（不能是null或undefined）</li><li>proto：该对象的新原型对象或null，否则抛出TypeError异常。</li></ul><ol start="4"><li>Object.getPrototypeOf(obj)： 与<code>Object.setPrototypeOf</code>方法配套，用于读取一个对象的原型对象。</li></ol><ul><li>obj：要获取原型对象的对象（不能是null或undefined）</li></ul><p>ES5：__proto__属性，设置某对象的原型对象和读取某对象的原型对象</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> sourceObj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">a</span><span class="token operator">:</span><span class="token string">&#39;sObj-aaa&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">b</span><span class="token operator">:</span><span class="token string">&#39;sObj-bbb&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">c</span><span class="token operator">:</span><span class="token string">&#39;sObj-ccc&#39;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">fn</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;sObj-fn()&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> targetObj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">a</span><span class="token operator">:</span><span class="token string">&#39;tObj-aaa&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">b</span><span class="token operator">:</span><span class="token string">&#39;tObj-bbb&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">d</span><span class="token operator">:</span><span class="token string">&#39;tObj-ddd&#39;</span>
<span class="token punctuation">}</span>
<span class="token comment">// __proto__设置当前的原型对象：targetObj的原型对象为sourceObj </span>
targetObj<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> sourceObj 
<span class="token comment">// 上面相当于</span>
targetObj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>sourceObj<span class="token punctuation">)</span>


<span class="token comment">// 下面验证一下,targetObj能获取</span>
targetObj<span class="token punctuation">.</span>c  <span class="token comment">// &#39;sObj-ccc&#39;</span>
targetObj<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// sObj-fn()</span>
<span class="token comment">// __proto__ 读取当前的原型对象,原型对象就是</span>
targetObj<span class="token punctuation">.</span>__proto__
<span class="token comment">// { &quot;a&quot;: &quot;sObj-aaa&quot;, &quot;b&quot;: &quot;sObj-bbb&quot;, &quot;c&quot;: &quot;sObj-ccc&quot;,fn: ƒ ()} </span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ES6：Object.setPrototypeOf()、Object.getPrototypeOf()，设置某对象的原型对象和读取某对象的原型对象</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> sourceObj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">a</span><span class="token operator">:</span><span class="token string">&#39;sObj-aaa&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">b</span><span class="token operator">:</span><span class="token string">&#39;sObj-bbb&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">c</span><span class="token operator">:</span><span class="token string">&#39;sObj-ccc&#39;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">fn</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;sObj-fn()&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> targetObj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">a</span><span class="token operator">:</span><span class="token string">&#39;tObj-aaa&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">b</span><span class="token operator">:</span><span class="token string">&#39;tObj-bbb&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">d</span><span class="token operator">:</span><span class="token string">&#39;tObj-ddd&#39;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 设置某对象的原型对象 这里是设置targetObj的原型对象为sourceObj</span>
Object<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span>targetObj<span class="token punctuation">,</span>sourceObj<span class="token punctuation">)</span>
<span class="token comment">// 读取targetObj的原型对象（预测就是sourceObj）</span>
Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>targetObj<span class="token punctuation">)</span>
<span class="token comment">// {a: &#39;sObj-aaa&#39;, b: &#39;sObj-bbb&#39;, c: &#39;sObj-ccc&#39;, fn: ƒ}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="object-keys-object-values-object-entries" tabindex="-1"><a class="header-anchor" href="#object-keys-object-values-object-entries"><span>Object.keys()，Object.values()，Object.entries()</span></a></h2><ul><li>Object.keys(): 返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的<strong>键名</strong></li><li>Object.values(): 返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的<strong>键值</strong></li><li>Object.entries(): 返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的<strong>键值对数组</strong></li><li>Object.fromEntries()：是Object.entries()的逆操作，用于将一个键值对数组转为对象。主要目的，是将键值对的数据结构还原为对象，因此特别适合将 Map 结构转为对象 fromEntries</li></ul><p>基础用法</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;小明&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">13</span> <span class="token punctuation">}</span>
Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token comment">// [&#39;name&#39;, &#39;age&#39;]</span>
Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token comment">// [&#39;小明&#39;, 13]</span>
Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token comment">// [ [&#39;name&#39;, &#39;小明&#39;], [&#39;age&#39;, 13] ]</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>for...of + Object.keys配套的Object.values和Object.entries使用</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// a</span>
<span class="token comment">// b</span>
<span class="token comment">// c</span>

<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> v <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// 1</span>
<span class="token comment">// 2</span>
<span class="token comment">// 3</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span> <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// console.log([key, value]); // [&#39;a&#39;, 1], [&#39;b&#39;, 2], [&#39;c&#39;, 3]</span>
<span class="token punctuation">}</span>
<span class="token comment">// &quot;a&quot;: 1</span>
<span class="token comment">// &quot;b&quot;: 2</span>
<span class="token comment">// &quot;c&quot;: 3</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="object-fromentries" tabindex="-1"><a class="header-anchor" href="#object-fromentries"><span>Object.fromEntries()</span></a></h3><ul><li>Object.entries(): 返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的<strong>键值对数组</strong></li><li>Object.fromEntries()：是Object.entries()的逆操作，用于将一个键值对数组转为对象。主要目的，是将键值对的数据结构还原为对象，因此特别适合将 Map 结构转为对象</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;小明&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">13</span> <span class="token punctuation">}</span>
Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token comment">// [ [&#39;name&#39;, &#39;小明&#39;], [&#39;age&#39;, 13] ]</span>

<span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;小明&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;小红&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span>
Object<span class="token punctuation">.</span><span class="token function">fromEntries</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span> <span class="token comment">// {name: &#39;小明&#39;, age: 13}</span>
Object<span class="token punctuation">.</span><span class="token function">fromEntries</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span> <span class="token comment">// {name: &#39;小红&#39;, age: 12}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="object-hasown" tabindex="-1"><a class="header-anchor" href="#object-hasown"><span>Object.hasOwn()</span></a></h3><p>JavaScript 对象的属性分成两种：自身的属性和继承的属性。</p><ol><li>hasOwnProperty()： 可以判断某个属性是否为原生属性</li></ol><ul><li>object.hasOwnProperty(property) object对象 property指定属性名</li></ul><ol start="2"><li>Object.hasOwn(obj,property)，也可以判断是否为<strong>自身的属性</strong>【ES2022 在Object对象上面新增了一个静态方法】</li></ol><ul><li>obj: 所要判断的对象</li><li>property: 属性名</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">a</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token literal-property property">b</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
obj<span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token string">&#39;CCC&#39;</span>

obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span> <span class="token comment">// false</span>

Object<span class="token punctuation">.</span><span class="token function">hasOwn</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
Object<span class="token punctuation">.</span><span class="token function">hasOwn</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span> <span class="token comment">// false</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那为什么还要有Object.hasOwn()? Object.hasOwn()的一个好处是，对于不继承Object.prototype的对象不会报错，而hasOwnProperty()是会报错的。 举个例子： Object.create(null)返回的对象obj是没有原型的，不继承任何属性，这导致调用obj.hasOwnProperty()会报错，但是Object.hasOwn()就能正确处理这种情况。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Object<span class="token punctuation">.</span><span class="token function">hasOwn</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span>  <span class="token comment">// false</span>
obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span> <span class="token comment">// Uncaught TypeError: obj.hasOwnProperty is not a function</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,69),o=[p];function c(l,i){return s(),a("div",null,o)}const d=n(e,[["render",c],["__file","object.html.vue"]]),k=JSON.parse('{"path":"/base/es6/object.html","title":"7. 对象的扩展","lang":"en-US","frontmatter":{"title":"7. 对象的扩展","icon":"object-group","order":7,"category":["Guide"],"tag":["对象的扩展"],"description":"对象扩展 属性名表达式 属性名表达式对于拿去有规律的对象挺有用的，意味着属性可以是一个变量 Object.getOwnPropertyDescriptor Object.getOwnPropertyDescriptor方法可以获取该属性的描述对象。 遍历对象 super关键字 关键字super，指向当前对象的原型对象 注意，super关键字表示原型对象...","head":[["meta",{"property":"og:url","content":"https://your.domain/base/es6/object.html"}],["meta",{"property":"og:site_name","content":"Docs Demo"}],["meta",{"property":"og:title","content":"7. 对象的扩展"}],["meta",{"property":"og:description","content":"对象扩展 属性名表达式 属性名表达式对于拿去有规律的对象挺有用的，意味着属性可以是一个变量 Object.getOwnPropertyDescriptor Object.getOwnPropertyDescriptor方法可以获取该属性的描述对象。 遍历对象 super关键字 关键字super，指向当前对象的原型对象 注意，super关键字表示原型对象..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"article:author","content":"ChorKiu"}],["meta",{"property":"article:tag","content":"对象的扩展"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"7. 对象的扩展\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ChorKiu\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"属性名表达式","slug":"属性名表达式","link":"#属性名表达式","children":[]},{"level":2,"title":"Object.getOwnPropertyDescriptor","slug":"object-getownpropertydescriptor","link":"#object-getownpropertydescriptor","children":[]},{"level":2,"title":"遍历对象","slug":"遍历对象","link":"#遍历对象","children":[]},{"level":2,"title":"super关键字","slug":"super关键字","link":"#super关键字","children":[]},{"level":2,"title":"Object.is()","slug":"object-is","link":"#object-is","children":[]},{"level":2,"title":"Object.assign()","slug":"object-assign","link":"#object-assign","children":[{"level":3,"title":"基础用法","slug":"基础用法","link":"#基础用法","children":[]},{"level":3,"title":"常用注意","slug":"常用注意","link":"#常用注意","children":[]},{"level":3,"title":"Object.assign()常见用途","slug":"object-assign-常见用途","link":"#object-assign-常见用途","children":[]}]},{"level":2,"title":"Object.getOwnPropertyDescriptors()","slug":"object-getownpropertydescriptors","link":"#object-getownpropertydescriptors","children":[{"level":3,"title":"用处1：Object.getOwnPropertyDescriptors()方法配合Object.defineProperties()方法，就可以实现正确拷贝（能拷贝target对象的属性，赋值方法、取值方法）","slug":"用处1-object-getownpropertydescriptors-方法配合object-defineproperties-方法-就可以实现正确拷贝-能拷贝target对象的属性-赋值方法、取值方法","link":"#用处1-object-getownpropertydescriptors-方法配合object-defineproperties-方法-就可以实现正确拷贝-能拷贝target对象的属性-赋值方法、取值方法","children":[]},{"level":3,"title":"用处2：Object.getOwnPropertyDescriptors()方法配合Object.create()方法，将对象属性克隆到一个新对象。这属于浅拷贝","slug":"用处2-object-getownpropertydescriptors-方法配合object-create-方法-将对象属性克隆到一个新对象。这属于浅拷贝","link":"#用处2-object-getownpropertydescriptors-方法配合object-create-方法-将对象属性克隆到一个新对象。这属于浅拷贝","children":[]}]},{"level":2,"title":"原型对象的操作方法","slug":"原型对象的操作方法","link":"#原型对象的操作方法","children":[]},{"level":2,"title":"Object.keys()，Object.values()，Object.entries()","slug":"object-keys-object-values-object-entries","link":"#object-keys-object-values-object-entries","children":[{"level":3,"title":"Object.fromEntries()","slug":"object-fromentries","link":"#object-fromentries","children":[]},{"level":3,"title":"Object.hasOwn()","slug":"object-hasown","link":"#object-hasown","children":[]}]}],"git":{},"readingTime":{"minutes":8.69,"words":2606},"filePathRelative":"base/es6/object.md","autoDesc":true}');export{d as comp,k as data};
